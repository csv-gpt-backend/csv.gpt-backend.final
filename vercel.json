import Busboy from 'busboy';
import path from 'path';
import os from 'os';
import fs from 'fs';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Coloca tu clave de API aquí.
// Esta es una clave de prueba. Deberías usar una variable de entorno para la tuya.
const API_KEY = "";
const genAI = new GoogleGenerativeAI(API_KEY);

// Almacén simple para el estado de la conversación y los archivos analizados
const conversations = new Map();
const analyzedFiles = new Map();

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  const sessionId = req.headers['x-session-id'] || 'default-session';
  let conversationState = conversations.get(sessionId) || [];
  let currentAnalyzedFiles = analyzedFiles.get(sessionId) || {};

  try {
    if (req.method === 'POST') {
      if (req.headers['content-type'] && req.headers['content-type'].includes('multipart/form-data')) {
        // Manejar la carga de archivos
        await new Promise((resolve, reject) => {
          const busboy = Busboy({ headers: req.headers });
          busboy.on('file', (name, file, info) => {
            const tempFilePath = path.join(os.tmpdir(), info.filename);
            const writeStream = fs.createWriteStream(tempFilePath);
            file.pipe(writeStream);
            writeStream.on('close', async () => {
              // Simular el análisis de archivos
              const fileContent = fs.readFileSync(tempFilePath, 'utf-8');
              currentAnalyzedFiles[info.filename] = fileContent;
              fs.unlinkSync(tempFilePath); // Limpiar el archivo temporal
              resolve();
            });
            writeStream.on('error', reject);
          });
          busboy.on('finish', () => {
            analyzedFiles.set(sessionId, currentAnalyzedFiles);
            res.status(200).json({ status: 'Archivos analizados' });
          });
          req.pipe(busboy);
        });

      } else if (req.headers['content-type'] && req.headers['content-type'].includes('application/json')) {
        // Manejar el chat
        const { message } = req.body;
        
        const fileData = Object.entries(currentAnalyzedFiles).map(([filename, content]) => 
          `### ${filename}\n${content}`
        ).join('\n\n');

        const prompt = `Actúa como un asistente de análisis de datos. Responde a la siguiente pregunta basándote en la información proporcionada. La información es un conjunto de archivos analizados, que se encuentran a continuación.\n\n${fileData}\n\nPregunta: ${message}`;
        
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro-latest"});
        const result = await model.generateContent(prompt);
        const responseText = await result.response.text();
        
        conversationState.push({ role: 'user', content: message });
        conversationState.push({ role: 'assistant', content: responseText });
        conversations.set(sessionId, conversationState);

        res.status(200).json({ response: responseText });

      } else {
        res.status(400).json({ error: 'Tipo de contenido no soportado' });
      }

    } else {
      res.status(405).json({ error: 'Método no permitido' });
    }
  } catch (error) {
    console.error('Error en la API:', error);
    res.status(500).json({ error: 'Error interno del servidor', details: error.message });
  }
}
